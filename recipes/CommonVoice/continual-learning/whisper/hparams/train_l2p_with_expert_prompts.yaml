# ############################################################################
# Model: Whisper (encoder-decoder) + cross-entropy loss
# Authors: Pooneh Mousavi 2022
# ############################################################################

seed: 1986
__set_seed: !apply:torch.manual_seed [!ref <seed>]

# Data preparation
new_locales: [rw, eo, kab, lg, mhr, ckb, ab, kmr, fy-NL, ia]
old_locales: [en, zh-CN, de, es, ru, fr, pt, ja, tr, pl]

download_dir: data
max_durations: null  # [36000, 3600, 3600] for whisper-large-v2

# Output directories
output_dir: !ref results/whisper_l2_expert_prompt/<seed>
save_dir: !ref <output_dir>/save

# Training parameters
train_batch_size: 128  # 8 for whisper-large-v2
valid_batch_size: 152  # 16 for whisper-large-v2
train_num_workers: 6
valid_num_workers: 6

sample_rate: 16000
sorting: ascending
avoid_if_longer_than: 10  # Remove utterances longer than 10s (open microphones)
vocab_size: 250  # Vocabulary size for BPE encoding of each new locale

ignore_index: -100  # For cross-entropy loss
label_smoothing: 0

num_epochs: 5  # 10 for whisper-large-v2
lr: 0.0001
improvement_threshold: 0.0025
annealing_factor: 0.8

whisper_variant: openai/whisper-tiny  # whisper-large-v2
encoder_only: False
freeze: False
freeze_encoder: True

# Wav2vec setting
# URL for the biggest Fairseq multilingual
wav2vec2_hub: facebook/wav2vec2-large-xlsr-53
wav2vec_output_dim: 1024
freeze_wav2vec: True

# prompt setting
pull_constraint: True
pull_constraint_coeff: 0.1
prompt_loc_mode: 'dec'
prompt_enabled: True
pool_size: 20
prompt_query: 'lang_emb'

max_target_length: 448  # Must be <= 448 (Whisper maximum target length)
auto_mix_prec: False  # True for whisper-large-v2 (for full dataset it causes NaN in forward pass for Kinyarwanda)
gradient_checkpointing: False
compile_model: True
ckpt_interval_minutes: 600

max_gen_tokens: 100
forced_decoder_locale: null  # Set dynamically
normalize_transcripts: True

# Dataloader options
train_dataloader_kwargs:
    batch_size: !ref <train_batch_size>
    num_workers: !ref <train_num_workers>

valid_dataloader_kwargs:
    batch_size: !ref <valid_batch_size>
    num_workers: !ref <valid_num_workers>

# Modules
whisper: !new:prompt_model.PromptWhisper
    source: !ref <whisper_variant>
    save_path: !ref <save_dir>/checkpoint
    sampling_rate: !ref <sample_rate>
    encoder_only: !ref <encoder_only>
    freeze: False
    freeze_encoder: False
    prompt: !ref <prompt>
    freeze_blocks : ["model.encoder"] # Use ["model.encoder","model.decoder.layer"] for only dinetuning the embedding layer
    prompt_enabled: !ref <prompt_enabled>
    prompt_loc_mode: !ref <prompt_loc_mode>  # 'enc', 'dec','both'


prompt: !new:prompt.Prompt
    length: 5
    embed_dim: 384
    embedding_key: 'cls' # set to mean if you want to get the mean of whisper-encoder as an input for promptkey, set to cls if you want to use some other pretrained model like wav2vec
    prompt_init: 'uniform'
    prompt_pool: True
    prompt_key: True
    pool_size: !ref <pool_size>
    top_k: 1
    batchwise_prompt: True
    prompt_key_init: 'zero'
    # prompt_key_dim: !ref <wav2vec_output_dim> #should be set to the output dimension of the embedding_key strategy
    token_id: -200


# wav2vec2: !new:speechbrain.lobes.models.huggingface_wav2vec.HuggingFaceWav2Vec2
#     source: !ref <wav2vec2_hub>
#     output_norm: True
#     freeze: !ref <freeze_wav2vec>
#     save_path: !ref <save_dir>/wav2vec2_checkpoint


ce_loss: !new:torch.nn.CrossEntropyLoss
    ignore_index: !ref <ignore_index>
    label_smoothing: !ref <label_smoothing>

modules:
    whisper: !ref <whisper>
    # wav2vec2: !ref <wav2vec2>

# Optimizers
opt_class: !name:torch.optim.AdamW
    lr: !ref <lr>

lr_annealing: !new:speechbrain.nnet.schedulers.NewBobScheduler
    initial_value: !ref <lr>
    improvement_threshold: !ref <improvement_threshold>
    annealing_factor: !ref <annealing_factor>
    patient: 0

# Performance metrics
wer_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats

cer_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
    split_tokens: True

# Counters, checkpointers, loggers, etc.
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <num_epochs>

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_dir>
    recoverables:
        model: !ref <whisper>
        prompt: !ref <prompt>
        scheduler: !ref <lr_annealing>
        counter: !ref <epoch_counter>

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <output_dir>/train_log.txt
